// node_modules/@ui5/webcomponents-base/dist/generated/AssetParameters.js
var assetParameters = { "themes": { "default": "sap_horizon", "all": ["sap_fiori_3", "sap_fiori_3_dark", "sap_fiori_3_hcb", "sap_fiori_3_hcw", "sap_horizon", "sap_horizon_dark", "sap_horizon_hcb", "sap_horizon_hcw"] }, "languages": { "default": "en", "all": ["ar", "bg", "ca", "cnr", "cs", "cy", "da", "de", "el", "en", "en_GB", "en_US_sappsd", "en_US_saprigi", "en_US_saptrc", "es", "es_MX", "et", "fi", "fr", "fr_CA", "hi", "hr", "hu", "id", "it", "iw", "ja", "kk", "ko", "lt", "lv", "mk", "ms", "nl", "no", "pl", "pt_PT", "pt", "ro", "ru", "sh", "sk", "sl", "sr", "sv", "th", "tr", "uk", "vi", "zh_CN", "zh_TW"] }, "locales": { "default": "en", "all": ["ar", "ar_EG", "ar_SA", "bg", "ca", "cnr", "cs", "da", "de", "de_AT", "de_CH", "el", "el_CY", "en", "en_AU", "en_GB", "en_HK", "en_IE", "en_IN", "en_NZ", "en_PG", "en_SG", "en_ZA", "es", "es_AR", "es_BO", "es_CL", "es_CO", "es_MX", "es_PE", "es_UY", "es_VE", "et", "fa", "fi", "fr", "fr_BE", "fr_CA", "fr_CH", "fr_LU", "he", "hi", "hr", "hu", "id", "it", "it_CH", "ja", "kk", "ko", "lt", "lv", "ms", "mk", "nb", "nl", "nl_BE", "pl", "pt", "pt_PT", "ro", "ru", "ru_UA", "sk", "sl", "sr", "sr_Latn", "sv", "th", "tr", "uk", "vi", "zh_CN", "zh_HK", "zh_SG", "zh_TW"] } };
var DEFAULT_THEME = assetParameters.themes.default;
var SUPPORTED_THEMES = assetParameters.themes.all;
var DEFAULT_LANGUAGE = assetParameters.languages.default;
var DEFAULT_LOCALE = assetParameters.locales.default;
var SUPPORTED_LOCALES = assetParameters.locales.all;

// node_modules/@ui5/webcomponents-base/dist/util/detectNavigatorLanguage.js
var isSSR = typeof document === "undefined";
var detectNavigatorLanguage = () => {
  if (isSSR) {
    return DEFAULT_LANGUAGE;
  }
  const browserLanguages = navigator.languages;
  const navigatorLanguage = () => {
    return navigator.language;
  };
  const rawLocale = browserLanguages && browserLanguages[0] || navigatorLanguage();
  return rawLocale || DEFAULT_LANGUAGE;
};
var detectNavigatorLanguage_default = detectNavigatorLanguage;

// node_modules/@ui5/webcomponents-base/dist/thirdparty/isPlainObject.js
var class2type = {};
var hasOwn = class2type.hasOwnProperty;
var toString = class2type.toString;
var fnToString = hasOwn.toString;
var ObjectFunctionString = fnToString.call(Object);
var fnIsPlainObject = function(obj) {
  var proto, Ctor;
  if (!obj || toString.call(obj) !== "[object Object]") {
    return false;
  }
  proto = Object.getPrototypeOf(obj);
  if (!proto) {
    return true;
  }
  Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
};
var isPlainObject_default = fnIsPlainObject;

// node_modules/@ui5/webcomponents-base/dist/thirdparty/_merge.js
var oToken = /* @__PURE__ */ Object.create(null);
var fnMerge = function(arg1, arg2, arg3, arg4) {
  var src, copyIsArray, copy, name, options, clone, target = arguments[2] || {}, i = 3, length = arguments.length, deep = arguments[0] || false, skipToken = arguments[1] ? void 0 : oToken;
  if (typeof target !== "object" && typeof target !== "function") {
    target = {};
  }
  for (; i < length; i++) {
    if ((options = arguments[i]) != null) {
      for (name in options) {
        src = target[name];
        copy = options[name];
        if (name === "__proto__" || target === copy) {
          continue;
        }
        if (deep && copy && (isPlainObject_default(copy) || (copyIsArray = Array.isArray(copy)))) {
          if (copyIsArray) {
            copyIsArray = false;
            clone = src && Array.isArray(src) ? src : [];
          } else {
            clone = src && isPlainObject_default(src) ? src : {};
          }
          target[name] = fnMerge(deep, arguments[1], clone, copy);
        } else if (copy !== skipToken) {
          target[name] = copy;
        }
      }
    }
  }
  return target;
};
var merge_default = fnMerge;

// node_modules/@ui5/webcomponents-base/dist/thirdparty/merge.js
var fnMerge2 = function(arg1, arg2) {
  return merge_default(true, false, ...arguments);
};
var merge_default2 = fnMerge2;

// node_modules/@ui5/webcomponents-base/dist/FeaturesRegistry.js
var features = /* @__PURE__ */ new Map();
var getFeature = (name) => {
  return features.get(name);
};

// node_modules/@ui5/webcomponents-base/dist/Location.js
var isSSR2 = typeof document === "undefined";
var internals = {
  search() {
    if (isSSR2) {
      return "";
    }
    return window.location.search;
  }
};
var getLocationHref = () => {
  if (isSSR2) {
    return "";
  }
  return window.location.href;
};
var getLocationSearch = () => {
  return internals.search();
};

// node_modules/@ui5/webcomponents-base/dist/validateThemeRoot.js
var getMetaTagValue = (metaTagName) => {
  const metaTag = document.querySelector(`META[name="${metaTagName}"]`), metaTagContent = metaTag && metaTag.getAttribute("content");
  return metaTagContent;
};
var validateThemeOrigin = (origin) => {
  const allowedOrigins = getMetaTagValue("sap-allowedThemeOrigins");
  return allowedOrigins && allowedOrigins.split(",").some((allowedOrigin) => {
    return allowedOrigin === "*" || origin === allowedOrigin.trim();
  });
};
var buildCorrectUrl = (oldUrl, newOrigin) => {
  const oldUrlPath = new URL(oldUrl).pathname;
  return new URL(oldUrlPath, newOrigin).toString();
};
var validateThemeRoot = (themeRoot) => {
  let resultUrl;
  try {
    if (themeRoot.startsWith(".") || themeRoot.startsWith("/")) {
      resultUrl = new URL(themeRoot, getLocationHref()).toString();
    } else {
      const themeRootURL = new URL(themeRoot);
      const origin = themeRootURL.origin;
      if (origin && validateThemeOrigin(origin)) {
        resultUrl = themeRootURL.toString();
      } else {
        resultUrl = buildCorrectUrl(themeRootURL.toString(), getLocationHref());
      }
    }
    if (!resultUrl.endsWith("/")) {
      resultUrl = `${resultUrl}/`;
    }
    return `${resultUrl}UI5/`;
  } catch (e) {
  }
};
var validateThemeRoot_default = validateThemeRoot;

// node_modules/@ui5/webcomponents-base/dist/types/AnimationMode.js
var AnimationMode;
(function(AnimationMode2) {
  AnimationMode2["Full"] = "full";
  AnimationMode2["Basic"] = "basic";
  AnimationMode2["Minimal"] = "minimal";
  AnimationMode2["None"] = "none";
})(AnimationMode || (AnimationMode = {}));
var AnimationMode_default = AnimationMode;

// node_modules/@ui5/webcomponents-base/dist/EventProvider.js
var EventProvider = class {
  constructor() {
    this._eventRegistry = /* @__PURE__ */ new Map();
  }
  attachEvent(eventName, fnFunction) {
    const eventRegistry = this._eventRegistry;
    const eventListeners = eventRegistry.get(eventName);
    if (!Array.isArray(eventListeners)) {
      eventRegistry.set(eventName, [fnFunction]);
      return;
    }
    if (!eventListeners.includes(fnFunction)) {
      eventListeners.push(fnFunction);
    }
  }
  detachEvent(eventName, fnFunction) {
    const eventRegistry = this._eventRegistry;
    const eventListeners = eventRegistry.get(eventName);
    if (!eventListeners) {
      return;
    }
    const indexOfFnToDetach = eventListeners.indexOf(fnFunction);
    if (indexOfFnToDetach !== -1) {
      eventListeners.splice(indexOfFnToDetach, 1);
    }
    if (eventListeners.length === 0) {
      eventRegistry.delete(eventName);
    }
  }
  /**
   * Fires an event and returns the results of all event listeners as an array.
   *
   * @param eventName the event to fire
   * @param data optional data to pass to each event listener
   * @returns {Array} an array with the results of all event listeners
   */
  fireEvent(eventName, data) {
    const eventRegistry = this._eventRegistry;
    const eventListeners = eventRegistry.get(eventName);
    if (!eventListeners) {
      return [];
    }
    return eventListeners.map((fn) => {
      return fn.call(this, data);
    });
  }
  /**
   * Fires an event and returns a promise that will resolve once all listeners have resolved.
   *
   * @param eventName the event to fire
   * @param data optional data to pass to each event listener
   * @returns {Promise} a promise that will resolve when all listeners have resolved
   */
  fireEventAsync(eventName, data) {
    return Promise.all(this.fireEvent(eventName, data));
  }
  isHandlerAttached(eventName, fnFunction) {
    const eventRegistry = this._eventRegistry;
    const eventListeners = eventRegistry.get(eventName);
    if (!eventListeners) {
      return false;
    }
    return eventListeners.includes(fnFunction);
  }
  hasListeners(eventName) {
    return !!this._eventRegistry.get(eventName);
  }
};
var EventProvider_default = EventProvider;

// node_modules/@ui5/webcomponents-base/dist/config/ConfigurationReset.js
var eventProvider = new EventProvider_default();
var CONFIGURATION_RESET = "configurationReset";
var attachConfigurationReset = (listener) => {
  eventProvider.attachEvent(CONFIGURATION_RESET, listener);
};
var resetConfiguration = () => {
  eventProvider.fireEvent(CONFIGURATION_RESET, void 0);
};

// node_modules/@ui5/webcomponents-base/dist/InitialConfiguration.js
var initialized = false;
var initialConfig = {
  animationMode: AnimationMode_default.Full,
  theme: DEFAULT_THEME,
  themeRoot: void 0,
  rtl: void 0,
  language: void 0,
  timezone: void 0,
  calendarType: void 0,
  secondaryCalendarType: void 0,
  noConflict: false,
  // no URL
  formatSettings: {},
  fetchDefaultLanguage: false,
  defaultFontLoading: true,
  enableDefaultTooltips: true
};
var getLanguage = () => {
  initConfiguration();
  return initialConfig.language;
};
var getFetchDefaultLanguage = () => {
  initConfiguration();
  return initialConfig.fetchDefaultLanguage;
};
var booleanMapping = /* @__PURE__ */ new Map();
booleanMapping.set("true", true);
booleanMapping.set("false", false);
var parseConfigurationScript = () => {
  const configScript = document.querySelector("[data-ui5-config]") || document.querySelector("[data-id='sap-ui-config']");
  let configJSON;
  if (configScript) {
    try {
      configJSON = JSON.parse(configScript.innerHTML);
    } catch (err) {
      console.warn("Incorrect data-sap-ui-config format. Please use JSON");
    }
    if (configJSON) {
      initialConfig = merge_default2(initialConfig, configJSON);
    }
  }
};
var parseURLParameters = () => {
  const params = new URLSearchParams(getLocationSearch());
  params.forEach((value, key) => {
    const parts = key.split("sap-").length;
    if (parts === 0 || parts === key.split("sap-ui-").length) {
      return;
    }
    applyURLParam(key, value, "sap");
  });
  params.forEach((value, key) => {
    if (!key.startsWith("sap-ui")) {
      return;
    }
    applyURLParam(key, value, "sap-ui");
  });
};
var normalizeThemeRootParamValue = (value) => {
  const themeRoot = value.split("@")[1];
  return validateThemeRoot_default(themeRoot);
};
var normalizeThemeParamValue = (param, value) => {
  if (param === "theme" && value.includes("@")) {
    return value.split("@")[0];
  }
  return value;
};
var applyURLParam = (key, value, paramType) => {
  const lowerCaseValue = value.toLowerCase();
  const param = key.split(`${paramType}-`)[1];
  if (booleanMapping.has(value)) {
    value = booleanMapping.get(lowerCaseValue);
  }
  if (param === "theme") {
    initialConfig.theme = normalizeThemeParamValue(param, value);
    if (value && value.includes("@")) {
      initialConfig.themeRoot = normalizeThemeRootParamValue(value);
    }
  } else {
    initialConfig[param] = value;
  }
};
var applyOpenUI5Configuration = () => {
  const openUI5Support = getFeature("OpenUI5Support");
  if (!openUI5Support || !openUI5Support.isOpenUI5Detected()) {
    return;
  }
  const OpenUI5Config = openUI5Support.getConfigurationSettingsObject();
  initialConfig = merge_default2(initialConfig, OpenUI5Config);
};
var initConfiguration = () => {
  if (typeof document === "undefined" || initialized) {
    return;
  }
  resetConfiguration2();
  initialized = true;
};
var resetConfiguration2 = (testEnv) => {
  if (testEnv) {
    resetConfiguration();
  }
  parseConfigurationScript();
  parseURLParameters();
  applyOpenUI5Configuration();
};

// node_modules/@ui5/webcomponents-base/dist/locale/languageChange.js
var eventProvider2 = new EventProvider_default();
var LANG_CHANGE = "languageChange";
var attachLanguageChange = (listener) => {
  eventProvider2.attachEvent(LANG_CHANGE, listener);
};

// node_modules/@ui5/webcomponents-base/dist/RenderQueue.js
var MAX_PROCESS_COUNT = 10;
var RenderQueue = class {
  constructor() {
    this.list = [];
    this.lookup = /* @__PURE__ */ new Set();
  }
  add(webComponent) {
    if (this.lookup.has(webComponent)) {
      return;
    }
    this.list.push(webComponent);
    this.lookup.add(webComponent);
  }
  remove(webComponent) {
    if (!this.lookup.has(webComponent)) {
      return;
    }
    this.list = this.list.filter((item) => item !== webComponent);
    this.lookup.delete(webComponent);
  }
  shift() {
    const webComponent = this.list.shift();
    if (webComponent) {
      this.lookup.delete(webComponent);
      return webComponent;
    }
  }
  isEmpty() {
    return this.list.length === 0;
  }
  isAdded(webComponent) {
    return this.lookup.has(webComponent);
  }
  /**
   * Processes the whole queue by executing the callback on each component,
   * while also imposing restrictions on how many times a component may be processed.
   *
   * @param callback - function with one argument (the web component to be processed)
   */
  process(callback) {
    let webComponent;
    const stats = /* @__PURE__ */ new Map();
    webComponent = this.shift();
    while (webComponent) {
      const timesProcessed = stats.get(webComponent) || 0;
      if (timesProcessed > MAX_PROCESS_COUNT) {
        throw new Error(`Web component processed too many times this task, max allowed is: ${MAX_PROCESS_COUNT}`);
      }
      callback(webComponent);
      stats.set(webComponent, timesProcessed + 1);
      webComponent = this.shift();
    }
  }
};
var RenderQueue_default = RenderQueue;

// node_modules/@ui5/webcomponents-base/dist/util/getSingletonElementInstance.js
var getSingletonElementInstance = (tag, parentElement = document.body, createEl) => {
  let el = document.querySelector(tag);
  if (el) {
    return el;
  }
  el = createEl ? createEl() : document.createElement(tag);
  return parentElement.insertBefore(el, parentElement.firstChild);
};
var getSingletonElementInstance_default = getSingletonElementInstance;

// node_modules/@ui5/webcomponents-base/dist/getSharedResource.js
var getMetaDomEl = () => {
  const el = document.createElement("meta");
  el.setAttribute("name", "ui5-shared-resources");
  el.setAttribute("content", "");
  return el;
};
var getSharedResourcesInstance = () => {
  if (typeof document === "undefined") {
    return null;
  }
  return getSingletonElementInstance_default(`meta[name="ui5-shared-resources"]`, document.head, getMetaDomEl);
};
var getSharedResource = (namespace, initialValue) => {
  const parts = namespace.split(".");
  let current = getSharedResourcesInstance();
  if (!current) {
    return initialValue;
  }
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];
    const lastPart = i === parts.length - 1;
    if (!Object.prototype.hasOwnProperty.call(current, part)) {
      current[part] = lastPart ? initialValue : {};
    }
    current = current[part];
  }
  return current;
};
var getSharedResource_default = getSharedResource;

// node_modules/@ui5/webcomponents-base/dist/Runtimes.js
var Runtimes = getSharedResource_default("Runtimes", []);

// node_modules/@ui5/webcomponents-base/dist/CustomElementsRegistry.js
var Tags = getSharedResource_default("Tags", /* @__PURE__ */ new Map());

// node_modules/@ui5/webcomponents-base/dist/Render.js
var eventProvider3 = new EventProvider_default();
var invalidatedWebComponents = new RenderQueue_default();

// node_modules/@ui5/webcomponents-base/dist/config/Fonts.js
var defaultFontLoading;
attachConfigurationReset(() => {
  defaultFontLoading = void 0;
});

// node_modules/@ui5/webcomponents-base/dist/theming/ThemeRegistered.js
var eventProvider4 = new EventProvider_default();
var THEME_REGISTERED = "themeRegistered";
var fireThemeRegistered = (theme) => {
  return eventProvider4.fireEvent(THEME_REGISTERED, theme);
};

// node_modules/@ui5/webcomponents-base/dist/asset-registries/Themes.js
var loaders = /* @__PURE__ */ new Map();
var registeredPackages = /* @__PURE__ */ new Set();
var registeredThemes = /* @__PURE__ */ new Set();
var registerThemePropertiesLoader = (packageName, themeName, loader) => {
  loaders.set(`${packageName}/${themeName}`, loader);
  registeredPackages.add(packageName);
  registeredThemes.add(themeName);
  fireThemeRegistered(themeName);
};

// node_modules/@ui5/webcomponents-base/dist/theming/ThemeLoaded.js
var eventProvider5 = new EventProvider_default();

// node_modules/@ui5/webcomponents-base/dist/config/ThemeRoot.js
var currThemeRoot;
attachConfigurationReset(() => {
  currThemeRoot = void 0;
});

// node_modules/@ui5/webcomponents-base/dist/config/Theme.js
var curTheme;
attachConfigurationReset(() => {
  curTheme = void 0;
});

// node_modules/@ui5/webcomponents-base/dist/Boot.js
var eventProvider6 = new EventProvider_default();

// node_modules/@ui5/webcomponents-base/dist/config/Language.js
var curLanguage;
var fetchDefaultLanguage;
attachConfigurationReset(() => {
  curLanguage = void 0;
  fetchDefaultLanguage = void 0;
});
var getLanguage2 = () => {
  if (curLanguage === void 0) {
    curLanguage = getLanguage();
  }
  return curLanguage;
};
var getFetchDefaultLanguage2 = () => {
  if (fetchDefaultLanguage === void 0) {
    fetchDefaultLanguage = getFetchDefaultLanguage();
  }
  return fetchDefaultLanguage;
};

// node_modules/@ui5/webcomponents-base/dist/locale/Locale.js
var rLocale = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;
var Locale = class {
  constructor(sLocaleId) {
    const aResult = rLocale.exec(sLocaleId.replace(/_/g, "-"));
    if (aResult === null) {
      throw new Error(`The given language ${sLocaleId} does not adhere to BCP-47.`);
    }
    this.sLocaleId = sLocaleId;
    this.sLanguage = aResult[1] || DEFAULT_LANGUAGE;
    this.sScript = aResult[2] || "";
    this.sRegion = aResult[3] || "";
    this.sVariant = aResult[4] && aResult[4].slice(1) || null;
    this.sExtension = aResult[5] && aResult[5].slice(1) || null;
    this.sPrivateUse = aResult[6] || null;
    if (this.sLanguage) {
      this.sLanguage = this.sLanguage.toLowerCase();
    }
    if (this.sScript) {
      this.sScript = this.sScript.toLowerCase().replace(/^[a-z]/, (s) => {
        return s.toUpperCase();
      });
    }
    if (this.sRegion) {
      this.sRegion = this.sRegion.toUpperCase();
    }
  }
  getLanguage() {
    return this.sLanguage;
  }
  getScript() {
    return this.sScript;
  }
  getRegion() {
    return this.sRegion;
  }
  getVariant() {
    return this.sVariant;
  }
  getVariantSubtags() {
    return this.sVariant ? this.sVariant.split("-") : [];
  }
  getExtension() {
    return this.sExtension;
  }
  getExtensionSubtags() {
    return this.sExtension ? this.sExtension.slice(2).split("-") : [];
  }
  getPrivateUse() {
    return this.sPrivateUse;
  }
  getPrivateUseSubtags() {
    return this.sPrivateUse ? this.sPrivateUse.slice(2).split("-") : [];
  }
  hasPrivateUseSubtag(sSubtag) {
    return this.getPrivateUseSubtags().indexOf(sSubtag) >= 0;
  }
  toString() {
    const r = [this.sLanguage];
    if (this.sScript) {
      r.push(this.sScript);
    }
    if (this.sRegion) {
      r.push(this.sRegion);
    }
    if (this.sVariant) {
      r.push(this.sVariant);
    }
    if (this.sExtension) {
      r.push(this.sExtension);
    }
    if (this.sPrivateUse) {
      r.push(this.sPrivateUse);
    }
    return r.join("-");
  }
};
var Locale_default = Locale;

// node_modules/@ui5/webcomponents-base/dist/locale/getLocale.js
var cache = /* @__PURE__ */ new Map();
var getLocaleInstance = (lang) => {
  if (!cache.has(lang)) {
    cache.set(lang, new Locale_default(lang));
  }
  return cache.get(lang);
};
var convertToLocaleOrNull = (lang) => {
  try {
    if (lang && typeof lang === "string") {
      return getLocaleInstance(lang);
    }
  } catch (e) {
  }
  return new Locale_default(DEFAULT_LOCALE);
};
var getLocale = (lang) => {
  if (lang) {
    return convertToLocaleOrNull(lang);
  }
  const configLanguage = getLanguage2();
  if (configLanguage) {
    return getLocaleInstance(configLanguage);
  }
  return convertToLocaleOrNull(detectNavigatorLanguage_default());
};
var getLocale_default = getLocale;

// node_modules/@ui5/webcomponents-base/dist/locale/normalizeLocale.js
var localeRegEX = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;
var SAPSupportabilityLocales = /(?:^|-)(saptrc|sappsd)(?:-|$)/i;
var M_ISO639_NEW_TO_OLD = {
  "he": "iw",
  "yi": "ji",
  "nb": "no",
  "sr": "sh"
};
var normalizeLocale = (locale) => {
  let m;
  if (!locale) {
    return DEFAULT_LOCALE;
  }
  if (typeof locale === "string" && (m = localeRegEX.exec(locale.replace(/_/g, "-")))) {
    let language = m[1].toLowerCase();
    let region = m[3] ? m[3].toUpperCase() : void 0;
    const script = m[2] ? m[2].toLowerCase() : void 0;
    const variants = m[4] ? m[4].slice(1) : void 0;
    const isPrivate = m[6];
    language = M_ISO639_NEW_TO_OLD[language] || language;
    if (isPrivate && (m = SAPSupportabilityLocales.exec(isPrivate)) || variants && (m = SAPSupportabilityLocales.exec(variants))) {
      return `en_US_${m[1].toLowerCase()}`;
    }
    if (language === "zh" && !region) {
      if (script === "hans") {
        region = "CN";
      } else if (script === "hant") {
        region = "TW";
      }
    }
    return language + (region ? "_" + region + (variants ? "_" + variants.replace("-", "_") : "") : "");
  }
  return DEFAULT_LOCALE;
};
var normalizeLocale_default = normalizeLocale;

// node_modules/@ui5/webcomponents-base/dist/locale/nextFallbackLocale.js
var LOCALE_FALBACK_MAP = {
  "zh_HK": "zh_TW",
  "in": "id"
};
var nextFallbackLocale = (locale) => {
  if (!locale) {
    return DEFAULT_LOCALE;
  }
  if (LOCALE_FALBACK_MAP[locale]) {
    return LOCALE_FALBACK_MAP[locale];
  }
  const p = locale.lastIndexOf("_");
  if (p >= 0) {
    return locale.slice(0, p);
  }
  return locale !== DEFAULT_LOCALE ? DEFAULT_LOCALE : "";
};
var nextFallbackLocale_default = nextFallbackLocale;

// node_modules/@ui5/webcomponents-base/dist/asset-registries/i18n.js
var warningShown = /* @__PURE__ */ new Set();
var reportedErrors = /* @__PURE__ */ new Set();
var bundleData = /* @__PURE__ */ new Map();
var bundlePromises = /* @__PURE__ */ new Map();
var loaders2 = /* @__PURE__ */ new Map();
var registerI18nLoader = (packageName, localeId, loader) => {
  const bundleKey = `${packageName}/${localeId}`;
  loaders2.set(bundleKey, loader);
};
var _setI18nBundleData = (packageName, data) => {
  bundleData.set(packageName, data);
};
var _hasLoader = (packageName, localeId) => {
  const bundleKey = `${packageName}/${localeId}`;
  return loaders2.has(bundleKey);
};
var _loadMessageBundleOnce = (packageName, localeId) => {
  const bundleKey = `${packageName}/${localeId}`;
  const loadMessageBundle = loaders2.get(bundleKey);
  if (loadMessageBundle && !bundlePromises.get(bundleKey)) {
    bundlePromises.set(bundleKey, loadMessageBundle(localeId));
  }
  return bundlePromises.get(bundleKey);
};
var _showAssetsWarningOnce = (packageName) => {
  if (!warningShown.has(packageName)) {
    console.warn(
      `[${packageName}]: Message bundle assets are not configured. Falling back to English texts.`,
      /* eslint-disable-line */
      ` Add \`import "${packageName}/dist/Assets.js"\` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section "Assets" in the documentation for more information.`
    );
    warningShown.add(packageName);
  }
};
var useFallbackBundle = (packageName, localeId) => {
  return localeId !== DEFAULT_LANGUAGE && !_hasLoader(packageName, localeId);
};
var fetchI18nBundle = async (packageName) => {
  const language = getLocale_default().getLanguage();
  const region = getLocale_default().getRegion();
  const variant = getLocale_default().getVariant();
  let localeId = language + (region ? `-${region}` : ``) + (variant ? `-${variant}` : ``);
  if (useFallbackBundle(packageName, localeId)) {
    localeId = normalizeLocale_default(localeId);
    while (useFallbackBundle(packageName, localeId)) {
      localeId = nextFallbackLocale_default(localeId);
    }
  }
  const fetchDefaultLanguage2 = getFetchDefaultLanguage2();
  if (localeId === DEFAULT_LANGUAGE && !fetchDefaultLanguage2) {
    _setI18nBundleData(packageName, null);
    return;
  }
  if (!_hasLoader(packageName, localeId)) {
    _showAssetsWarningOnce(packageName);
    return;
  }
  try {
    const data = await _loadMessageBundleOnce(packageName, localeId);
    _setI18nBundleData(packageName, data);
  } catch (error) {
    const e = error;
    if (!reportedErrors.has(e.message)) {
      reportedErrors.add(e.message);
      console.error(e.message);
    }
  }
};
attachLanguageChange((lang) => {
  const allPackages = [...bundleData.keys()];
  return Promise.all(allPackages.map(fetchI18nBundle));
});

// node_modules/@ui5/webcomponents-icons/dist/generated/json-imports/i18n.js
var importMessageBundle = async (localeId) => {
  switch (localeId) {
    case "ar":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-ar" */
        "./messagebundle_ar-3HJCYXCP.js"
      )).default;
    case "bg":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-bg" */
        "./messagebundle_bg-BILNZEWE.js"
      )).default;
    case "ca":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-ca" */
        "./messagebundle_ca-GH2MQNFE.js"
      )).default;
    case "cnr":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-cnr" */
        "./messagebundle_cnr-GWHYPDBA.js"
      )).default;
    case "cs":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-cs" */
        "./messagebundle_cs-RAUFOWHL.js"
      )).default;
    case "cy":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-cy" */
        "./messagebundle_cy-HRFRGQED.js"
      )).default;
    case "da":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-da" */
        "./messagebundle_da-SUBVHB6I.js"
      )).default;
    case "de":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-de" */
        "./messagebundle_de-QD44C274.js"
      )).default;
    case "el":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-el" */
        "./messagebundle_el-OYLNM6G3.js"
      )).default;
    case "en":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-en" */
        "./messagebundle_en-5WQSJNPI.js"
      )).default;
    case "en_GB":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-en_GB" */
        "./messagebundle_en_GB-DB6UTMGI.js"
      )).default;
    case "en_US_sappsd":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-en_US_sappsd" */
        "./messagebundle_en_US_sappsd-CVZBDKWW.js"
      )).default;
    case "en_US_saprigi":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-en_US_saprigi" */
        "./messagebundle_en_US_saprigi-R5Y3ZHTL.js"
      )).default;
    case "en_US_saptrc":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-en_US_saptrc" */
        "./messagebundle_en_US_saptrc-ZIKMW3B6.js"
      )).default;
    case "es":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-es" */
        "./messagebundle_es-MWOBS7ZQ.js"
      )).default;
    case "es_MX":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-es_MX" */
        "./messagebundle_es_MX-6NHVPU4N.js"
      )).default;
    case "et":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-et" */
        "./messagebundle_et-BL3FTVNI.js"
      )).default;
    case "fi":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-fi" */
        "./messagebundle_fi-QWYB2TNU.js"
      )).default;
    case "fr":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-fr" */
        "./messagebundle_fr-RSBMCI24.js"
      )).default;
    case "fr_CA":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-fr_CA" */
        "./messagebundle_fr_CA-JEKQD6ZC.js"
      )).default;
    case "hi":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-hi" */
        "./messagebundle_hi-3H5HYOUT.js"
      )).default;
    case "hr":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-hr" */
        "./messagebundle_hr-IHGWCTVR.js"
      )).default;
    case "hu":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-hu" */
        "./messagebundle_hu-B2XOEWBN.js"
      )).default;
    case "id":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-id" */
        "./messagebundle_id-INUNFOUK.js"
      )).default;
    case "it":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-it" */
        "./messagebundle_it-PQTSDFMZ.js"
      )).default;
    case "iw":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-iw" */
        "./messagebundle_iw-VD6J4Q2V.js"
      )).default;
    case "ja":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-ja" */
        "./messagebundle_ja-UBSOZ7VP.js"
      )).default;
    case "kk":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-kk" */
        "./messagebundle_kk-KU2HWKTC.js"
      )).default;
    case "ko":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-ko" */
        "./messagebundle_ko-53MKU7I3.js"
      )).default;
    case "lt":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-lt" */
        "./messagebundle_lt-7KSGSO7O.js"
      )).default;
    case "lv":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-lv" */
        "./messagebundle_lv-UG2RG5BC.js"
      )).default;
    case "mk":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-mk" */
        "./messagebundle_mk-53FSOMJR.js"
      )).default;
    case "ms":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-ms" */
        "./messagebundle_ms-J7IXL5FD.js"
      )).default;
    case "nl":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-nl" */
        "./messagebundle_nl-E5QWSVVD.js"
      )).default;
    case "no":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-no" */
        "./messagebundle_no-HG6E7ILY.js"
      )).default;
    case "pl":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-pl" */
        "./messagebundle_pl-MLSDQPOO.js"
      )).default;
    case "pt":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-pt" */
        "./messagebundle_pt-ONK7JMBW.js"
      )).default;
    case "pt_PT":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-pt_PT" */
        "./messagebundle_pt_PT-44IZNCU3.js"
      )).default;
    case "ro":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-ro" */
        "./messagebundle_ro-75BQZMY3.js"
      )).default;
    case "ru":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-ru" */
        "./messagebundle_ru-DGDBMAG3.js"
      )).default;
    case "sh":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-sh" */
        "./messagebundle_sh-IEI6UQZX.js"
      )).default;
    case "sk":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-sk" */
        "./messagebundle_sk-4OEY4W56.js"
      )).default;
    case "sl":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-sl" */
        "./messagebundle_sl-MQFSXIPR.js"
      )).default;
    case "sr":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-sr" */
        "./messagebundle_sr-K2XO5YS5.js"
      )).default;
    case "sv":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-sv" */
        "./messagebundle_sv-ISBFMFZH.js"
      )).default;
    case "th":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-th" */
        "./messagebundle_th-FZXVW2VR.js"
      )).default;
    case "tr":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-tr" */
        "./messagebundle_tr-CLPJFZTG.js"
      )).default;
    case "uk":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-uk" */
        "./messagebundle_uk-2RSMDY4P.js"
      )).default;
    case "vi":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-vi" */
        "./messagebundle_vi-BARRBV5X.js"
      )).default;
    case "zh_CN":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-zh_CN" */
        "./messagebundle_zh_CN-XDY4VG5H.js"
      )).default;
    case "zh_TW":
      return (await import(
        /* webpackChunkName: "ui5-webcomponents-icons-messagebundle-zh_TW" */
        "./messagebundle_zh_TW-U7RU6SVI.js"
      )).default;
    default:
      throw "unknown locale";
  }
};
var importAndCheck = async (localeId) => {
  const data = await importMessageBundle(localeId);
  if (typeof data === "string" && data.endsWith(".json")) {
    throw new Error(`[i18n] Invalid bundling detected - dynamic JSON imports bundled as URLs. Switch to inlining JSON files from the build. Check the "Assets" documentation for more information.`);
  }
  return data;
};
var localeIds = [
  "ar",
  "bg",
  "ca",
  "cnr",
  "cs",
  "cy",
  "da",
  "de",
  "el",
  "en",
  "en_GB",
  "en_US_sappsd",
  "en_US_saprigi",
  "en_US_saptrc",
  "es",
  "es_MX",
  "et",
  "fi",
  "fr",
  "fr_CA",
  "hi",
  "hr",
  "hu",
  "id",
  "it",
  "iw",
  "ja",
  "kk",
  "ko",
  "lt",
  "lv",
  "mk",
  "ms",
  "nl",
  "no",
  "pl",
  "pt",
  "pt_PT",
  "ro",
  "ru",
  "sh",
  "sk",
  "sl",
  "sr",
  "sv",
  "th",
  "tr",
  "uk",
  "vi",
  "zh_CN",
  "zh_TW"
];
localeIds.forEach((localeId) => {
  registerI18nLoader("@ui5/webcomponents-icons", localeId, importAndCheck);
});

export {
  attachLanguageChange,
  DEFAULT_LOCALE,
  SUPPORTED_LOCALES,
  getFeature,
  registerThemePropertiesLoader,
  getLocale_default,
  registerI18nLoader
};
//# sourceMappingURL=chunk-HZIBX5WI.js.map
